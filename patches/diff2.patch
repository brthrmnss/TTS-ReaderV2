Index: www/js/lib/pdf/pdf.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- www/js/lib/pdf/pdf.js	(date 1482271951000)
+++ www/js/lib/pdf/pdf.js	(revision )
@@ -1737,7 +1737,7 @@
                    PDFJS.VERBOSITY_LEVELS.warnings : PDFJS.verbosity);

 /**
- * The maximum supported canvas size in total pixels e.g. width * height.
+ * The maximum supported canvas size in total pixels e.g. width * height.
  * The default value is 4096 * 4096. Use -1 for no limit.
  * @var {number}
  */
@@ -2020,7 +2020,7 @@
  *                      rendering call the function that is the first argument
  *                      to the callback.
  */
-
+
 /**
  * PDF page operator list.
  *
@@ -2637,6 +2637,7 @@
             var buf = new Uint8Array(size * components);
             var tmpCanvas = createScratchCanvas(width, height);
             var tmpCtx = tmpCanvas.getContext('2d');
+            debugger
             tmpCtx.drawImage(img, 0, 0);
             var data = tmpCtx.getImageData(0, 0, width, height).data;
             var i, j;
@@ -3173,7 +3174,6 @@
       var old = this._transformMatrix;
       this._transformStack.push(old);
       this._transformMatrix = old.slice(0, 6);
-
       this._originalSave();
     };

@@ -3492,6 +3492,7 @@

   function CanvasGraphics(canvasCtx, commonObjs, objs, imageLayer) {
     this.ctx = canvasCtx;
+    //debugger; bookmark.later - all canbas objects come through ehre... images and others
     this.current = new CanvasExtraState();
     this.stateStack = [];
     this.pendingClip = null;
@@ -3517,6 +3518,7 @@
   }

   function putBinaryImageData(ctx, imgData) {
+    debugger;
     if (typeof ImageData !== 'undefined' && imgData instanceof ImageData) {
       ctx.putImageData(imgData, 0, 0);
       return;
@@ -3652,6 +3654,7 @@
   }

   function putBinaryImageMask(ctx, imgData) {
+    debugger;
     var height = imgData.height, width = imgData.width;
     var fullChunkHeight = 16;
     var fracChunks = height / fullChunkHeight;
@@ -3818,6 +3821,17 @@
         this.ctx.restore();
       }

+      //this.ctx.mozOpaque = true;
+      //bookmark.make background blue, this is for the page
+      //not for images
+      /*this.ctx.save();
+      this.ctx.fillStyle = 'rgb(255, 255, 255)';
+      this.ctx.fillStyle = 'blue';
+      this.ctx.fillRect(0, 0, width, height);
+      this.ctx.restore();
+
+      debugger;*/
+
       var transform = viewport.transform;

       this.ctx.save();
@@ -3860,7 +3874,15 @@
         }

         fnId = fnArray[i];
-
+        //bookmark.where are are files called from ...
+        //bookmark.where is file processed
+        var fxName = this[fnId];
+        if ( fxName ) {
+          fxName = fxName.name;
+        }
+        if (fxName != 'lineTo') {
+          console.log('\t', 'hereX', fnId, i, fxName);
+        }
         if (fnId !== OPS.dependency) {
           this[fnId].apply(this, argsArray[i]);
         } else {
@@ -3906,6 +3928,8 @@
       CachedCanvases.clear();
       WebGLUtils.clear();

+      //bookmark. potentail place where layout is handled ..
+      //debugger
       if (this.imageLayer) {
         this.imageLayer.endLayout();
       }
@@ -4265,6 +4289,7 @@
       ctx.restore();
       ctx.clip();
       ctx.beginPath();
+      console.log('ctx', ctx)
       delete this.pendingTextPaths;
     },
     setCharSpacing: function CanvasGraphics_setCharSpacing(spacing) {
@@ -4546,6 +4571,7 @@
       } else {
         current.x += x * textHScale;
       }
+      //debugger
       ctx.restore();
     },

@@ -4572,7 +4598,7 @@
       ctx.translate(current.x, current.y);

       ctx.scale(textHScale, fontDirection);
-
+      debugger
       for (i = 0; i < glyphsLength; ++i) {
         glyph = glyphs[i];
         if (glyph === null) {
@@ -4606,6 +4632,7 @@
         ctx.translate(width, 0);
         current.x += width * textHScale;
       }
+      debugger
       ctx.restore();
       this.processingType3 = null;
     },
@@ -4655,6 +4682,7 @@
       var color = Util.makeCssRgb(arguments);
       this.ctx.fillStyle = color;
       this.current.fillColor = color;
+      console.log('CanvasGraphics_setFillRGBColor', color)
     },

     shadingFill: function CanvasGraphics_shadingFill(patternIR) {
@@ -5061,6 +5089,7 @@
       var c = currentTransform[2], d = currentTransform[3];
       var heightScale = Math.max(Math.sqrt(c * c + d * d), 1);

+        ;
       var imgToPaint, tmpCanvas;
       // instanceof HTMLElement does not work in jsdom node.js module
       if (imgData instanceof HTMLElement || !imgData.data) {
@@ -5071,11 +5100,12 @@
         putBinaryImageData(tmpCtx, imgData);
         imgToPaint = tmpCanvas.canvas;

+        debugger;

-      //bookmark: store a picture
+        //bookmark: store a picture
         var img = document.createElement("img");
         img.src = imgToPaint.toDataURL("image/png");
-        //document.body.appendChild(img);
+        // document.body.appendChild(img);


       }
@@ -5109,6 +5139,19 @@
       ctx.drawImage(imgToPaint, 0, 0, paintWidth, paintHeight,
                                 0, -height, width, height);

+        //debugger; //bookmark.before saving image
+      //  debugger
+        if ( window.imgs == null )
+          window.imgs = []
+        var add = {}
+        add.img = imgToPaint
+        add.s = ctx;
+        add.ctx = ctx;
+        add.paintWidth = paintWidth;
+        add.paintHeight = paintHeight;
+        add.height = height;
+        add.width = width;
+        window.imgs.push( add)
       if (this.imageLayer) {
         var position = this.getCanvasPosition(0, -height);
         this.imageLayer.appendImage({
@@ -5118,6 +5161,8 @@
           width: width / currentTransform[0],
           height: height / currentTransform[3]
         });
+
+
       }
       this.restore();
     },
@@ -6860,7 +6905,7 @@
     this.lineJoin = '';
     this.lineCap = '';
     this.miterLimit = 0;
-
+
     this.dashArray = [];
     this.dashPhase = 0;

@@ -7087,7 +7132,7 @@
       }
       return opListToTree(opList);
     },
-
+
     executeOpTree: function SVGGraphics_executeOpTree(opTree) {
       var opTreeLen = opTree.length;
       for(var x = 0; x < opTreeLen; x++) {
@@ -7319,6 +7364,7 @@

         current.tspan.textContent += character;
       }
+      console.log('color', 'added text', current.tspan.textContent);
       if (vertical) {
         current.y -= x * textHScale;
       } else {
@@ -7350,6 +7396,7 @@

       this.tgrp.appendChild(current.txtElement);

+      console.log('color', 'added text', current.tspan.textContent);
     },

     setLeadingMoveText: function SVGGraphics_setLeadingMoveText(x, y) {
@@ -7406,6 +7453,7 @@
     },

     endText: function SVGGraphics_endText() {
+      debugger;
       if (this.current.pendingClip) {
         this.cgrp.appendChild(this.tgrp);
         this.pgrp.appendChild(this.cgrp);
Index: www/js/r2.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- www/js/r2.js	(date 1482271951000)
+++ www/js/r2.js	(revision )
@@ -3,7 +3,69 @@
  */

 // alert('whs')
+var rip = {}
+rip.settings = {}
+rip.settings.showSpanNumbers = true;
+rip.settings.newSentenceOnOrigFont = true;
+rip.settings.margin = null
+rip.settings.margin = {l:10,t:10,r:10,b:10};
+rip.settings.margin_show = true;
+rip.settings.newSentence_OnWideSpace = true;

+rip.settings.newSentence_OnVerticalSpace = true;
+rip.settings.newSentence_OnVerticalSpace_log = true;
+
+rip.settings.newSentence_OnVerticalSpace_log_displayPurple = true;
+
+var rUtils = {};
+rUtils.t  = '\t'
+rUtils.clearPixels = function clearPixels(px) {
+    if ( false  == px.includes('px' ) ) {
+        return px;
+    }
+
+    var fontSize = px;
+    fontSize = fontSize.replace('px', '');
+    fontSize = parseFloat(fontSize);
+    return fontSize;
+}
+
+rUtils.getFontSize = function getFontSize(ui) {
+    var fontSizeOrig = ui.css('font-size')
+    if ( fontSizeOrig == null ) {
+        return null;
+    }
+    var fontSize = rUtils.clearPixels(fontSizeOrig)
+    if ( isNaN(fontSize) ) {
+        console.warn('fontSize is null', fontSize, fontSizeOrig)
+        return null;
+    }
+
+    return fontSize;
+}
+rUtils.removeUiWithClass =  function removeUiWithClass(cssclass){
+    $('.'+cssclass).remove();
+    //console.log('y',  $('.'+cssclass))
+}
+rUtils.removeAllClassesOfClass =  function removeAllClassesOfClass(cssclass){
+    $('.'+cssclass).removeClass(cssclass)
+    //console.log('y',  $('.'+cssclass))
+}
+
+rUtils.isSpaceWide = function isSpaceWide(a,b,range) {
+    var diff = Math.abs(a-b);
+    if ( diff < range)
+        return true
+    return false
+}
+
+rUtils.addToArrayDict = function addToArrayDict(dict, key, val) {
+    var arr = dict[key];
+    if ( arr == null ) arr = [];
+    arr.push(val);
+    dict[key] = arr;
+}
+
 window.fx = function onProcessPageAndDefineUtils(){
     console.log('reloadYYY');
     //debugger
@@ -402,29 +464,33 @@
         return spans;
     }

-    //TODO: Shelve changes for non document mode ...
-    //this app has too many problems
-    //if (window.$scope.playerForm.documentMode == false) {
     spans = pH.createPage();
-    // } else {
-    //     spans = pH.createPageDocument();
-    // }

-    //debugger;
-
     pH.sortSpans = function sortSpans(_spans) {
         //why: spans come in strange order. this will order they by y then x
-        function sortByY(a, b){
+        var utilsSort = {};
+
+        utilsSort.sortByY = function sortByY(a, b) {
             a = $(a);
             b = $(b);
-            var aName = a.css('top').replace('px','')
+            var aName = a.css('top').replace('px', '')
-            var bName = b.css('top').replace('px','')
+            var bName = b.css('top').replace('px', '')
             aName = parseFloat(aName)
             bName = parseFloat(bName)
             //console.log('comparison y', aName, bName)
-            return ((aName < bName) ? -1 : ((aName > bName) ? 1 : 0));
-        }
-        function sortByX(a, b){
+            var result = ((aName < bName) ? -1 : ((aName > bName) ? 1 : 0));
+            var meth = 'sortY b007'
+            var b2 = 'By changing'
+            if (a.text().includes('time.') || b.text().includes('time.')) {
+                if (a.text().includes(b2) || b.text().includes(b2)) {
+                    console.log(meth,
+                        aName, bName,
+                        "\n","\t", a.text(),
+                        'vs', "\n","\t", b.text(), result)
+                }}
+            return result;
+        };
+        utilsSort.sortByX = function sortByX(a, b){
             a = $(a);
             b = $(b);
             var aName = a.css('left').replace('px','')
@@ -433,8 +499,8 @@
             bName = parseFloat(bName)
             //console.log('comparison x', aName, bName)
             return ((aName < bName) ? -1 : ((aName > bName) ? 1 : 0));
-        }
-        function sortByXY(a, b){
+        };
+        utilsSort.sortByXY = function sortByXY(a, b){
             a = $(a);
             b = $(b);

@@ -448,12 +514,32 @@
             if (lineHeight == null ) {
                 lineHeight = pH.pageHeight*(7/480)
             }
+            lineHeight = rUtils.clearPixels(lineHeight)

-            if ( Math.abs(aY-bY) > aY*.05) {
+            //why?
+            var yDiff =  Math.abs(aY-bY)
+            var minDifference_To_ConsiderNewLine = aY*.05;
+            minDifference_To_ConsiderNewLine = lineHeight*.05;
+            rUtils.f = function toFixed(v) {
+                return v.toFixed(2);
+            }
+            aY = rUtils.f(aY)
+            bY = rUtils.f(bY)
+            yDiff = rUtils.f(yDiff)
+            minDifference_To_ConsiderNewLine = rUtils.f(minDifference_To_ConsiderNewLine)
+
+
+
+            var meth = 'sortXY b007'
+            console.log(meth, "\t", a.text() ,'vs', b.text())
+            if ( yDiff > minDifference_To_ConsiderNewLine) {
+                console.error('b00', 'comparison y', aY,
+                    bY, yDiff, minDifference_To_ConsiderNewLine)
                 //yDiff = 0
                 return ((aY < bY) ? -1 : ((aY > bY) ? 1 : 0));
             }
-            //console.log('comparison y', aName, bName)
+            console.log('b00', 'comparison y', aY,
+                bY, yDiff, minDifference_To_ConsiderNewLine,lineHeight)


             var aX = a.css('left').replace('px','')
@@ -462,16 +548,20 @@
             bX = parseFloat(bX)
             //console.log('comparison x', aName, bName)
             return ((aX < bX) ? -1 : ((aX > bX) ? 1 : 0));
-        }
-        var sortedSpans = _spans.sort(sortByX);
-        sortedSpans = sortedSpans.sort(sortByXY);
-        sortedSpans = sortedSpans.sort(sortByY);
-
-
+        };
+        /*
+         var sortedSpans = _spans.sort(utilsSort.sortByX);
+         sortedSpans = sortedSpans.sort(utilsSort.sortByXY);
+         sortedSpans = sortedSpans.sort(utilsSort.sortByY);
+         */
+        //var sortedSpans = _spans.sort(utilsSort.sortByXY);
+        //var sortedSpans = _spans.sort(utilsSort.sortByY);
+        //var sortedSpans = _spans.sort(utilsSort.sortByX);
         var sSH = {};
         sSH.detectTwoPages = function detectTwoPages(__spans) {
-            var sortedByX = __spans.sort(sortByX);
+            // var sortedByX = __spans.sort(utilsSort.sortByX);

+
             //count number at x
             //if two rows appear ... then two rows
             var xVals = {};
@@ -479,11 +569,18 @@
                 var span = $(v);
                 //var fontSize = pH.utils.getFontSize(v);
                 var left = pH.utils.getPos(v).left;
+
+                var lineHeight = rUtils.getFontSize(span)
+
                 left = pH.utils.quantize(left, 5)
+
                 var arr = xVals[left];
                 if ( arr == null ) arr = [];
                 arr.push(span)
                 xVals[left] = arr;
+
+
+                // rUtils.addToArrayDict(dictYRowToSentence, )
             })
             var colCount = 0;
             var maxColX = 0;
@@ -518,13 +615,146 @@

             return __spans;
         }
-        _spans = sSH.detectTwoPages(_spans)
+        _spans = sSH.detectTwoPages(_spans);

+        uiUtils.absHelper = function abs(div2, l, t, r, b ) {
+            div2.css('position', 'absolute')
+            if ( l == 0 ) { l = '0px'}
+            if ( t == 0 ) { t = '0px'}
+            if ( r == 0 ) { r = '0px'}
+            if ( b == 0 ) { b = '0px'}
+            if ( l )
+                div2.css('left', l )
+            if ( t )
+                div2.css('top', t )
+            if ( r )
+                div2.css('right', r )
+            if ( b )
+                div2.css('bottom', b )
+        }

+        rUtils.classNameBroken = 'brokenLine'
+        rUtils.removeUiWithClass(rUtils.classNameBroken);
+
+        sSH.addMargins = function addMargins(_spans_, margins) {
+            var filteredSpans = [];
+            var parent = $(_spans_[0]).parent()
+            var classMargins = 'spanMargins'
+            rUtils.removeUiWithClass(classMargins);
+            var div = $("<div />");
+            div.addClass(classMargins)
+            var div2 = div.clone();
+
+            var parentWidth = parent.width()
+            var parentHeight = parent.height()
+
+            margins.parentWidth = parentWidth;
+            margins.parentHeight = parentHeight;
+
+            if ( margins.l ) {
+                div2 = div.clone();
+                div2.css('background-color', 'blue')
+                div2.css('opacity', '0.3')
+                div2.text('left margin')
+                div2.css('left', '0px' )
+                var width = parent.width()*(margins.l/100);
+                div2.css('width', width)
+                div2.css('bottom', '0px')
+                div2.css('top', '0px')
+                div2.css('position', 'absolute')
+                parent.append(div2)
+                margins.minX = width;
+            }
+
+            if ( margins.t ) {
+                div2 = div.clone();
+                div2.css('background-color', 'red')
+                div2.css('opacity', '0.3')
+                div2.text('top margin')
+                uiUtils.absHelper(div2, 0, 0, 0)
+                var height = parent.height()*(margins.t/100);
+                div2.css('height', height)
+                margins.minY = height;
+                parent.append(div2)
+            }
+
+            if ( margins.r ) {
+                div2 = div.clone();
+                div2.css('background-color', 'green')
+                div2.css('opacity', '0.3')
+                div2.text('right margin')
+                uiUtils.absHelper(div2, null, 0, 0, 0)
+                var marginWidth = parent.width()*(margins.r/100);
+                margins.maxX = parentWidth-width;
+                div2.css('width', marginWidth)
+                parent.append(div2)
+            }
+
+            if ( margins.b ) {
+                div2 = div.clone();
+                div2.css('background-color', 'yellow')
+                div2.css('opacity', '0.3')
+                div2.text('bottom margin')
+                uiUtils.absHelper(div2, 0, null, 0, 0);
+                var marginHeight = parent.height()*(margins.b/100);
+                div2.css('marginHeight', marginHeight);
+                margins.maxY = parentHeight-marginHeight;
+                parent.append(div2)
+            }
+
+            console.log('margins', margins)
+
+            $.each(_spans_, function filterSpansInMargin(k,span) {
+
+                rUtils.getXY = function getXY(ui) {
+                    var xy = {}
+                    xy.x = ui.css('left')
+                    xy.y = ui.css('top')
+                    xy.x= rUtils.clearPixels((xy.x))
+                    xy.y= rUtils.clearPixels((xy.y))
+                    return xy ;
+                }
+
+
+                span = $(span)
+                var spanText = span.text();
+                var xy = rUtils.getXY(span);
+                if ( xy.x < margins.minX ) {
+                    console.error('removing', 'x too small', xy, spanText)
+                    return;
+                }
+                if ( xy.x > margins.maxX ) {
+                    console.error('removing', 'x too big', xy, spanText)
+                    return;
+                }
+                if ( xy.y < margins.minY ) {
+                    console.error('removing', 'y too small', xy, spanText)
+                    return;
+                }
+                if ( xy.y > margins.maxY ) {
+                    console.error('removing', 'y too big', xy, spanText)
+                    return;
+                }
+
+                //return;
+                filteredSpans.push(span)
+            })
+
+
+            return filteredSpans
+        }
+
+
+        if ( rip.settings.margin ) {
+            _spans = sSH.addMargins(_spans, rip.settings.margin)
+        }
+
+
         //collect all by y
         var yDict = {};
+        var yDict2  = {};
         var idx = 0
-        $.each(_spans, function (indexSpan,v) {
+        $.each(_spans, function arrangeSpansIntoRows(indexSpan,v) {
             var span = $(v);
             var fontSize = pH.utils.getFontSize(v);
             var top = pH.utils.getPos(v).top;
@@ -542,34 +772,64 @@
              var  rem1 = yTop % 5;
              var yTop = yTop - rem1;*/
             var rowHeight = 10;
+            rowHeight = fontSize/2; //will break out items at different heights
             //rowSize = pH.totalPageHeight/20; //twenty rows in a page
             var rem = top % rowHeight
             var yTop = top - rem;
-            yTop = Math.floor(yTop);
+            yTop = Math.round(yTop);


+            rUtils.addToArrayDict(yDict, yTop, span);
+
+            rUtils.addToArrayDict(yDict2, yTop, span.text());
+            /*
-            var spansAtRow = yDict[yTop];
-            if ( spansAtRow== null ) {spansAtRow = [];}
-            spansAtRow.push(span)
+             var spansAtRow = yDict[yTop];
+             if ( spansAtRow== null ) {spansAtRow = [];}
+             spansAtRow.push(span)
-            var spansAtRow = spansAtRow.sort(sortByX);
+             var spansAtRow = spansAtRow.sort(utilsSort.sortByX);
-            yDict[yTop] = spansAtRow
+             yDict[yTop] = spansAtRow
+             */

-
         })

         //return sortedSpans
-        console.error('spans organized by row. with x values considered', yDict);
+        console.error('spans organized by row.',
+            ' with x values considered', yDict, yDict2);

-        function flattendRows(dictSpansByRow) {
+        console.info('yDict', JSON.stringify(yDict2, null, 2) )
+
+        utilsSort.flattendRows = function flattendRows(dictSpansByRow) {
             var spans = [];
+            $('.spanSortAnnotations').remove();
+            var count = 0;
             $.each(dictSpansByRow, function (indexRow,spansAtRow) {
                 $.each(spansAtRow, function (indexSpan,span) {
-                    spans.push(span)
+                    spans.push(span);
+
+                    if ( rip.settings.showSpanNumbers ) {
+                        var spanClone = $(span);
+                        var cloneSpanNumber = spanClone.clone()
+                        var p = spanClone.parent();
+
+                        cloneSpanNumber.addClass('spanSortAnnotations')
+                        p.append(cloneSpanNumber);
+                        cloneSpanNumber.text(count+1)
+                        cloneSpanNumber.attr('pen',  span.text());
+                        cloneSpanNumber.css('color', 'blue')
+                        cloneSpanNumber.css('font-family', 'Arial')
+                        //cloneSpanNumber.css('color', blue)
+                        //cloneSpanNumber.text('ddddd')
+                        cloneSpanNumber.css('font-size', '16px')
+                        cloneSpanNumber.css('letter-spacing', '-3px')
+                        //console.log('adding to', p[0], cloneSpanNumber[0])
+                        count++
+                    }
+
                 })
             })
             return spans;
         }
-        var spansZ = flattendRows(yDict);
+        var spansZ = utilsSort.flattendRows(yDict);
         return spansZ
     }
     pH.totalPageHeight = $($(spans[0]).parent()).height();
@@ -577,24 +837,7 @@
     console.error('spans', spans);

     var selectionElement = window.helper.selectionNode;
-    /*if (selectionElement != null ) {
-     console.error('selectionElement', selectionElement, spans.indexOf(selectionElement));

-     var matchedIndex = null;
-     $(spans).each(function(i, span){
-     if ( span.html() == $(selectionElement).html() ) {
-     matchedIndex = i;
-     console.error('selectionElement', 'check', 'match', matchedIndex, spans.length, span.html())
-     }
-     });
-
-     if ( matchedIndex  ) {
-     spans = spans.slice(matchedIndex);
-     console.error('selectionElement', 'check', 'ok', matchedIndex, spans.length)
-     }
-     };*/
-
-    //spans = spans.slice(-9);
     pH.highlightSpans = function highlightSpans(_spans, addNumbers) {
         var idx = 0
         function removeAllClassesOfClass(cssclass){
@@ -663,6 +906,10 @@
         cSH.currentSentenceSpans = [];
         cSH.totalPageHeight = $($(spans[0]).parent()).height();
         cSH.spans = [];
+        cSH.sentenceNotEmpty = function sentenceNotEmpty() {
+            var sentenceNotEmpty_ = cSH.currentSentence != ''
+            return sentenceNotEmpty_
+        }
         pH.cSH = cSH;
         $.each(spans, function processSpan(k,v) { //find spans
             console.log('...', v);
@@ -679,12 +926,134 @@
             cSI.getStyles = function getStyle(span){
                 var top = span.css('top').replace('px','')
                 top = parseFloat(top);
+
+                var left = span.css('left').replace('px','')
+                left = parseFloat(left);
+
                 var styles = {};
-                styles.fontFamily = span.css('font-family')
+                styles.fontFamily = span.css('font-family');
+                styles.fontFamilyOrig = span.attr('origFont');
                 styles.fontSize = span.css('font-size')
                 styles.fontSizeAsNumber = span.css('font-size').replace('px','')
                 styles.fontSizeAsNumber =  parseFloat(styles.fontSizeAsNumber)
                 styles.top = top;
+                //console.log('what is width', span.width() );
+                styles.width = span.width();
+                styles.right = span.width()+left;
+                //console.log('what is width', styles.width,
+                //    styles.right, left);
+                styles.text = span.text();
+
+
+                styles.isFontStyleSame = function isFontStyleSame(otherStyles) {
+
+                    var different = null;
+                    var props = ['fontFamily', 'fontSize']
+                    $.each(props, function isSame(k,propName) {
+                        var a = styles[propName]
+                        var b = otherStyles[propName]
+
+                        if ( a.includes('px')) {
+                            a = rUtils.clearPixels(a)
+                            a = Math.floor(a)
+                        }
+                        if ( b.includes('px')) {
+                            b = rUtils.clearPixels(b)
+                            b = Math.floor(b)
+                        }
+
+                        if ( a != b ) {
+                            console.info('differe ont', propName, a,b);
+                            different = propName
+                            return false;
+                        }
+                    })
+
+                    if ( different != null ) {
+                        return false;
+                    }
+                    return true;
+
+                    if (cSH.currentStyle.fontFamilyOrig != cSH.lastStyle.fontFamilyOrig) {
+                        var arr = [
+                            cSH.currentStyle.fontFamilyOrig,
+                            cSH.lastStyle.fontFamilyOrig,
+                            cSH.currentStyle.fontFamily, cSH.lastStyle.fontFamily,
+                            cSH.currentStyle.fontSize, cSH.lastStyle.fontSize]
+                        cSI.addSentenceToList('fonts Orig different ' + arr);
+                    }
+                }
+
+
+
+                styles.isLargeVerticalGap = function isLargeVerticalGap(otherStyles) {
+                    var expectedNewlineYDiff = styles.fontSizeAsNumber*1.7
+                    var maxYPosition = styles.top + expectedNewlineYDiff;
+
+                    var diffY = styles.top - otherStyles.top
+
+                    var vGapIsLargerThan1Line = diffY > expectedNewlineYDiff
+
+                    diffY =diffY.toFixed(2)
+                    expectedNewlineYDiff = expectedNewlineYDiff.toFixed(2)
+                    // console.log('broken', span.text());
+                    /*console.log('broken', otherStyles.top - maxYPosition,
+                     expectedNewlineYDiff, maxYPosition);*/
+                    if ( rip.settings.newSentence_OnVerticalSpace_log) {
+                        console.log('\t', 'broken',vGapIsLargerThan1Line,
+                            otherStyles.top, styles.top, '-',
+                            diffY ,'<', expectedNewlineYDiff,
+                            '|', styles.fontSizeAsNumber)
+                        console.log(rUtils.t, rUtils.t, 'broken',otherStyles.text);
+                        console.log(rUtils.t, rUtils.t, 'broken', '/|/',styles.text )
+                    }
+                    if ( vGapIsLargerThan1Line) {
+                        if ( rip.settings.newSentence_OnVerticalSpace_log) {
+                            console.error('brokenline', 'match', styles.text)
+                        }
+
+
+                        /* if (rip.settings.newSentence_OnVerticalSpace_log) {
+                         console.log('\t', 'broken',
+                         otherStyles.top, styles.top, '-',
+                         diffY, expectedNewlineYDiff,
+                         '|', styles.fontSizeAsNumber, styles.text, '/|/', otherStyles.text);
+                         }
+                         if ( diffY > expectedNewlineYDiff ) {
+                         if (rip.settings.newSentence_OnVerticalSpace_log) {
+                         console.error('brokenline', 'match')
+                         }
+                         }*/
+
+
+
+
+                        if ( rip.settings.newSentence_OnVerticalSpace_log_displayPurple  ) {
+                            var parent = $(span[0]).parent()
+                            var div = $("<div />");
+                            div.addClass(rUtils.classNameBroken)
+                            var div2 = div.clone();
+
+                            div2 = div.clone();
+                            div2.css('background-color', 'purple')
+                            div2.css('opacity', '0.3')
+                            div2.text('broken after '+otherStyles.text)
+                            div2.css('left', '0px' )
+                            div2.css('min-height', '2px' )
+                            div2.css('width', '90%' )
+                            div2.css('font-size', styles.fontSizeAsNumber*0.5 )
+                            div2.css('top',maxYPosition)
+                            div2.css('position', 'absolute')
+                            parent.append(div2)
+                        }
+
+
+                        return true;
+                    }
+                    return false;
+                }
+
+
                 return styles;
             };

@@ -712,7 +1081,105 @@

             cSH.currentStyle = cSI.getStyles(span)

-            cSI.currentText = cSI.flattenText(span)
+            cSI.currentText = cSI.flattenText(span);
+
+
+
+            cSH.addAVGapElement = function addAVGapElement(why, span) {
+                var spanText = span.text();
+                if (cSH.addedNotEmptySpacing === true) {
+                    console.log('broken skip', 'addedNotEmptySpacing')
+
+                    if (cSH.currentSentence != '') {
+                        console.error('vgap b00', spanText)
+                    } else {
+                        return; //do not add double vgap , even if itrem missing
+                    }
+                }
+
+                //cSH.uiElement = null;
+
+                if (rip.settings.newSentence_OnVerticalSpace_noNewElements) {
+                    return;
+                }
+
+                var lastElement = cSH.uiElements.slice(-1)[0]
+
+                if ( lastElement == null ){
+                    console.log('broken slip', null)
+                    return
+
+                }
+
+                if ( lastElement.hasClass('vGap')) {
+                    console.log('broken skip', 'vgap')
+                    return
+                }
+                //TDOD: remove and use something else
+                if ( lastElement.hasClass('after_vGap')) {
+                    console.log('broken skip', 'after_vGap')
+                   // return
+                }
+
+                console.error('bad add', 'broken', spanText,
+                    'want to add a sentence on this span, but the sentnce is emtpy ... ')
+                console.error(rUtils.t,'bad add',
+                    cSH.addedNotEmptySpacing,
+                    cSH.currentSentence,
+                    lastElement[0].outerHTML
+                );
+
+//create a new vgap element to for p tag
+                cSH.addedNotEmptySpacing = true;
+
+                //cSH.uiElements.push( cSH.uiElement )
+
+                var uiEl = uiUtils.tag('p');
+                uiEl.attr('why', why);
+                uiEl.addClass('vGap');
+                uiEl.css('font-size', '7px')
+                uiEl.css('color', '#666666')
+                uiEl.html(['..... >>>',
+
+                    cSH.uiElement.text(),
+                    cSH.currentSentence,
+                    spanText,
+                ].join('<br /> _____   '));
+                // cSH.uiElements.push(uiEl);
+                console.error('bad size', cSH.uiElements.length )
+
+
+                var uiEl =  cSH.uiElement.clone();
+                cSH.uiElement = uiEl;
+                uiEl.css('color', 'blue')
+                uiEl.text( cSH.currentSentence)
+                uiEl.text('///')
+                cSH.uiElements.push(uiEl);
+
+                var uiEl = cSH.uiElement.clone();
+                uiEl.text('\\\\\\')
+                uiEl.attr('why', why);
+                //  uiEl.addClass('vGap');
+                //  uiEl.css('font-size', '7px')
+                uiEl.css('color', 'red')
+                /* uiEl.html(
+                 cSH.currentSentence
+                 );*/
+
+                cSH.uiElements.push(uiEl);
+
+                cSI.addSentenceToList('inside of loop')
+
+
+
+                //split old element by,
+                //making a new element
+                var uiEl =  cSH.uiElement.clone();
+                cSH.uiElement = uiEl;
+                uiEl.text('')
+                uiEl.addClass('after_vGap');
+                cSH.uiElements.push(uiEl);
+            }
             //console.log('---', span.html(),'||', cSI.currentText)
             cSI.addSentenceToList = function addSentenceToList(why, addCurrentSpan) {
                 /*console.log('add sentence', currentSentence, k, why)
@@ -723,7 +1190,17 @@
                  currentSentence = '';
                  currentSentenceSpans = [];*/
                 //debugger
+
+                var spanText = span.text();
+                if ( ! cSH.sentenceNotEmpty() ) {
+
+                    cSH.addAVGapElement(why, span)
+                    return
+                }
+                cSH.addedNotEmptySpacing = false;
+
                 console.log('why add sentence?', why, cSH.currentSentence);
+                console.log(rUtils.t, 'why add sentence?', '>>>', spanText);
                 var dbgWhyAdding = false;
                 var spanCopiedProps = span.clone();
                 //spanCopiedProps.css('fontFamily', span.attr('origFont'));
@@ -767,6 +1244,7 @@
                 }


+                cSI.sentenceNotAdded = false;



@@ -802,19 +1280,20 @@
                 var sDH = {};
                 sDH.headerRatio =  40/480;
                 sDH.footerRatio = 430/480;
-
+                /*
-                var top = _span.css('top').replace('px','')
-                top = parseFloat(top);
-                var styles = {};
-                styles.fontFamily = _span.css('font-family')
-                styles.fontSize = _span.css('font-size')
-                styles.fontSizeAsNumber = _span.css('font-size').replace('px','')
-                styles.fontSizeAsNumber =  parseFloat(styles.fontSizeAsNumber)
-                styles.top = top;
-                styles.fontFamilyOrig = _span.attr('origFont');
+                 var top = _span.css('top').replace('px','')
+                 top = parseFloat(top);
+                 var styles = {};
+                 styles.fontFamily = _span.css('font-family')
+                 styles.fontSize = _span.css('font-size')
+                 styles.fontSizeAsNumber = _span.css('font-size').replace('px','')
+                 styles.fontSizeAsNumber =  parseFloat(styles.fontSizeAsNumber)
+                 styles.top = top;
+                 styles.fontFamilyOrig = _span.attr('origFont');
-                //console.log('skipDivs', cSI.currentText)
-
+                 //console.log('skipDivs', cSI.currentText)*/
+                var styles =  cSI.getStyles(span);
-                cSH.currentStyle = styles;
+                cSH.currentStyle =  styles;
+
                 //console.error('skip title ledger ',top,cSH.totalPageHeight , sDH.headerRatio, cSI.currentText)
                 if ( top/cSH.totalPageHeight < sDH.headerRatio ) {
                     console.log('skip title ledger ', cSI.currentText)
@@ -894,6 +1373,7 @@
                 }

             };
+
             if ( cSI.skipDivs(span) ) {
                 console.error('skip span', span, cSI.currentText)
                 return;
@@ -909,28 +1389,93 @@
              }
              }*/

+            cSI.sentenceNotAdded = true
+
             if (cSH.lastStyle != null ) {
-                if (cSH.currentStyle.fontFamily != cSH.lastStyle.fontFamily ||
+
+
+
+                //if currentSentence is not empty ('mioght have alreayd switched')
+                if ( /* cSI.sentenceNotAdded &&*/
+                    rip.settings.newSentence_OnVerticalSpace   ) {
+
+                    //if font and size is same
+                    var largeGapMeansNewLine = cSH.currentStyle.isLargeVerticalGap(cSH.lastStyle)
+
+                    if ( largeGapMeansNewLine ) {
+                        if ( rip.settings.newSentence_OnVerticalSpace_log)
+                            console.log('bbbbtop broken')
+
+                        // cSI.addSentenceToList('large gap ' );
+                        cSH.addAVGapElement('arge gap2', span)
+                        //var Break = rUtils.isSpaceWide(cSH.lastStyle.right,
+                        //    cSH.currentStyle.left, cSH.currentStyle.fontSizeAsNumber * 2)
+
+                    }
+
+                }
+
+
+
+                if (cSI.sentenceNotAdded &&
+                    cSH.currentStyle.fontFamily != cSH.lastStyle.fontFamily ||
                     cSH.currentStyle.fontSize != cSH.lastStyle.fontSize   ){
                     var arr = [cSH.currentStyle.fontFamily , cSH.lastStyle.fontFamily ,
                         cSH.currentStyle.fontSize, cSH.lastStyle.fontSize]
                     cSI.addSentenceToList('fonts different ' + arr);
                 }
-            }
+                /*      }

+                 if (cSH.lastStyle != null ) {*/

-            if (cSH.lastStyle != null ) {
-                if (cSH.currentStyle.fontFamilyOrig != cSH.lastStyle.fontFamilyOrig    ){
+                if ( rip.settings.newSentenceOnOrigFont) {
+                    if (cSI.sentenceNotAdded &&
+                        cSH.currentStyle.fontFamilyOrig != cSH.lastStyle.fontFamilyOrig) {
-                    var arr = [
-                        cSH.currentStyle.fontFamilyOrig,
-                        cSH.lastStyle.fontFamilyOrig,
+                        var arr = [
+                            cSH.currentStyle.fontFamilyOrig,
+                            cSH.lastStyle.fontFamilyOrig,
-                        cSH.currentStyle.fontFamily , cSH.lastStyle.fontFamily ,
+                            cSH.currentStyle.fontFamily, cSH.lastStyle.fontFamily,
-                        cSH.currentStyle.fontSize, cSH.lastStyle.fontSize]
-                    cSI.addSentenceToList('fonts Orig different ' + arr);
-                }
+                            cSH.currentStyle.fontSize, cSH.lastStyle.fontSize]
+                        cSI.addSentenceToList('fonts Orig different ' + arr);
+                    }
+                };
+
+                //if currentSentence is not empty ('mioght have alreayd switched')
+                if ( cSI.sentenceNotAdded &&
+                    rip.settings.newSentence_OnWideSpace) {
+                    rUtils.isSpaceWide = function isSpaceWide(a,b,range) {
+                        var diff = Math.abs(a-b);
+                        if ( diff < range)
+                            return true
+                        return false
-            }
+                    }


+                    //if font and size is same
+
+                    var isFontSame = cSH.currentStyle.isFontStyleSame(cSH.lastStyle)
+
+                    if ( isFontSame ) {
+                        var Break = rUtils.isSpaceWide(cSH.lastStyle.right,
+                            cSH.currentStyle.left, cSH.currentStyle.fontSizeAsNumber * 2)
+
+                    }
+                    /*if (cSH.currentStyle.fontFamilyOrig != cSH.lastStyle.fontFamilyOrig) {
+                     var arr = [
+                     cSH.currentStyle.fontFamilyOrig,
+                     cSH.lastStyle.fontFamilyOrig,
+                     cSH.currentStyle.fontFamily, cSH.lastStyle.fontFamily,
+                     cSH.currentStyle.fontSize, cSH.lastStyle.fontSize]
+                     cSI.addSentenceToList('fonts Orig different ' + arr);
+                     }*/
+                }
+
+
+
+
+
+            }
+
             cSI.getHTML = function getHTML(){
                 var html = span.html();
                 var htmlArr = [];
@@ -1044,16 +1589,36 @@
         window.cSH = cSH;
         cSH.printUI = function printUIElements(display) {
             // cSH.uiElements = $(cSH.uiElements);
-            console.log('length', cSH.uiElements.length)
+            console.log('length', cSH.uiElements.length);
             window.cSH.pageHTML = ''
             // var list = [];
             $.each(cSH.uiElements, function onP(k,v){
                 // list.push(v[0]);
                 //console.log(v.html())
-                var html = v[0].outerHTML;
+                var ui = v.clone();
+                if ( display == false ) {
+                    var scale = window.$scope.pdfScale
+                    var fontSize = rUtils.getFontSize(ui)
+
+                    if ( scale != 1 && fontSize > 0) {
+                        var scaleInverse = 1/scale;
+
+                        //console.log('printUI', fontSize)
+                        var newFontSize = fontSize * scaleInverse;
+
+                        var isNewSizeValid = isNaN(newFontSize) == false
+                        if ( isNewSizeValid ) {
+                            ui.css('font-size', newFontSize+'px');
+                        }
+                        // console.log(scale, scaleInverse, size, newSize, ui.text())
+
+                    }
+                }
+                var html = ui[0].outerHTML;
                 if ( display != false )
-                    console.log(html);
+                    console.log('printUI', html);
                 window.cSH.pageHTML += html + "\n"
+
             });
             //  cSH.uiElements = $(list);
         }
@@ -1069,16 +1634,16 @@
     var sentencesX = pH.createSentences(spans);
     console.log('sentencesX', 'k', sentencesX);
     console.log('cSH', pH.cSH);
-    //pH.cSH.spans = []
+//pH.cSH.spans = []
     pH.highlightSpans(pH.cSH.spans);
-    //console.clear()
+//console.clear()
     var sentencesX = pH.createSentences(spans);
     console.log('sentencesX', 'k', sentencesX);
     console.log('cSH', pH.cSH);
-    //pH.cSH.spans = []
+//pH.cSH.spans = []
     pH.highlightSpans(pH.cSH.spans);
-    //console.clear()
-    //console.error('food...')
+//console.clear()
+//console.error('food...')

     pH.testSelectAllSentences =  function highlightEachSentence(_sentences) {
         var idx = 0
@@ -1181,7 +1746,7 @@
     pH.playCurPage(play,playIndex)


-    // window.uploadCurrentPage()
+// window.uploadCurrentPage()
     return;

 }
@@ -1193,11 +1758,12 @@
     console.log('run 5 pages')
 }

-window.uploadCurrentPage = function uploadCurrentPage(_fxPageComplete) {
+window.uploadCurrentPage = function uploadCurrentPage(_fxPageComplete, processPage2) {
     //console.clear();
     console.log('uploadCurrentPage')

+    if ( processPage2 != false )
-    window.processPage();
+        window.processPage();

     var url = 'http://127.0.0.1:6006/upBook';
     var data = {}
@@ -1208,9 +1774,9 @@
     data.htmlContents = window.pH.cSH.pageHTML;

     console.log('pageHTML', data)
+    // console.log('pageHTML', 'htmlContents', data.htmlContents)


-
     //if ( window.screenCaputerer ==null ) {
     var s = new ScreenCapture();
     s.init()
@@ -1316,10 +1882,11 @@
             return;
         }

-        if ( page = cfg.lastPage ) {
+        if ( page == cfg.lastPage ) {
             console.log('ended early', page, cfg.pageCount, cfg.maxPageCount)
             return;
         }
+        cfg.lastPage = page;
         window.uploadCurrentPage(goToNextPage_Loop)
     }
 }
@@ -1334,5 +1901,22 @@
 console.log('doddddddmde2')


+function defineTestable() {
+    //load ai book
+    function toc() {
+        //gt page 7
+    }
+    //function goexampleofspacingdiffAndMargin()
+    //page 250
+    window.goToDiagramPage = function goToDiaOage() {
+        $scope.pdfViewerAPI.goToPage(251)
+    }
+    window.goTtoNewPage = function goToDiaOage() {
+        $scope.pdfViewerAPI.goToPage(254)
+    }
+}
+defineTestable()
+
+setTimeout(uploadCurrentPage, 2500, null, false)

 //window.handlePage()
\ No newline at end of file
Index: PdfRipServer.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PdfRipServer.js	(date 1482271951000)
+++ PdfRipServer.js	(revision )
@@ -39,10 +39,19 @@
         var bodyParser  = require("body-parser");
         var multer = require('multer');

-        app.use(bodyParser.urlencoded({'extended':'true'}));            // parse application/x-www-form-urlencoded
-        app.use(bodyParser.json());                                     // parse application/json
+        app.use(bodyParser.json({limit: '50mb'}));
+
+        app.use(bodyParser.urlencoded({
+            limit: '50mb',
+            extended: true
+        }));
+
+        //app.use(bodyParser.urlencoded({'extended':'true'}));            // parse application/x-www-form-urlencoded
+       // app.use(bodyParser.json());                                     // parse application/json
         app.use(bodyParser.json({ type: 'application/vnd.api+json' })); // parse application/vnd.api+json as json

+
+
         /*app.use(express.bodyParser());
          app.use(express.json());
          app.use(express.urlencoded());
@@ -57,17 +66,23 @@
             var bookName = body.book_name;
             var page = body.page
             var file = page + '.txt'
+            var fileHTML = page + '.html'
             console.log(req.body)
             var contents = req.body.contents;
             if ( sh.isArray(contents) ) {
                 contents = contents.join('\n')
             }
+            var htmlContents = req.body.htmlContents;
-
+
             var dirBook = __dirname+'/'+'rips/'+bookName;
             sh.mkdirp(__dirname+'/'+'rips')
             sh.mkdirp(dirBook)
-            sh.writeFile(dirBook+'/'+file,  contents)
+            sh.writeFile(dirBook+'/'+file,  contents);

+            htmlContents = sh.replace(htmlContents, 'color: rgba(0, 0, 0, 0);', '')
+            htmlContents = sh.html.wrapInHTMLTag(htmlContents, 'html');
+            sh.writeFile(dirBook+'/'+fileHTML,  htmlContents);
+
             res.send('Hello World!');
         });

@@ -109,7 +124,57 @@
         });


+        app.post('/doUp3',function(req,res){

+
+            function decodeBase64Image(dataString) {
+                var matches = dataString.match(/^data:([A-Za-z-+\/]+);base64,(.+)$/),
+                    response = {};
+
+                if (matches.length !== 3) {
+                    return new Error('Invalid input string');
+                }
+
+                response.type = matches[1];
+                response.data = new Buffer(matches[2], 'base64');
+
+                return response;
+            }
+
+
+
+
+            var p = req.body;
+            //console.log(imageBuffer, p);
+            var data = p.data;
+            var imageBuffer = decodeBase64Image(data);
+            console.log('bpp')
+            var name = p.name;
+            sh.writeFile(name, imageBuffer.data, 'base64')
+            res.send('done')
+            return;
+            upload(req,res,function(err) {
+                console.error('what...', 5, req.headers)
+                if(err) {
+                    return res.end("Error uploading file.");
+                }
+                if ( req.body.img_val ) {
+                    var base64Data = req.body.img_val.replace(/^data:image\/png;base64,/, "");
+                    var base = 'x'
+                    if ( req.body.name != null ) {
+                        base = req.body.name;
+                    }
+                    var filename = base + '.png'
+                    var fileName = __dirname + '/' + 'uploads/' + filename
+                    require("fs").writeFileSync(fileName, base64Data, 'base64' );
+
+                    //sh.writeFile(fileName, req.body.img_val, true, true)
+                }
+                res.end("File is uploaded");
+            });
+        });
+
+
         app.listen(self.settings.port, function () {
             //console.log('Listening on ' + app.address().port)
         });
@@ -141,6 +206,5 @@
     return;

 }
-


Index: node_modules/shelpers/lib/shelpers.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- node_modules/shelpers/lib/shelpers.js	(date 1482271951000)
+++ node_modules/shelpers/lib/shelpers.js	(revision )
@@ -3590,6 +3590,7 @@
 helper.isDirectory = isDirectory;
 helper.openFiles = openFiles;
 helper.getFileName = getFileName;
+helper.getFilename = getFileName;
 helper.getPath = getPath;
 helper.makePathIfDoesNotExist = makePathIfDoesNotExist;
 helper.mkdirp = makePathIfDoesNotExist;
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .gitignore	(date 1482271951000)
+++ .gitignore	(revision )
@@ -1,2 +1,3 @@
 /www/uploads
-/controls/
\ No newline at end of file
+/controls/
+*.bak
\ No newline at end of file
Index: www/js/controllers/playerCtrls.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- www/js/controllers/playerCtrls.js	(date 1482271951000)
+++ www/js/controllers/playerCtrls.js	(revision )
@@ -191,8 +191,14 @@
 			window.$scope = $scope;
 			window.fx2();
 		}
+		$scope.onConvertBook = function onConvertBook() {
+			window.$scope = $scope;
+			window.fx2();
+		}
-
+

+
+
 		// MANAGE AUDIO SRC
 		$scope.trustSrc = function(src){
 			return $sce.trustAsResourceUrl(src);
@@ -795,7 +801,8 @@
 						$scope.userHistoryHelper.setLastPage($scope.pdfCurrentPage);
 					}, 300)
 				}
-				var spans = $('#page_'+($scope.pdfCurrentPage-1)).find('#XLayer').children('span')
+				var pageNumber = $scope.pdfCurrentPage-1
+				var spans = $('#page_'+(pageNumber)).find('#XLayer').children('span')
 				var spans = $scope.getSpans();
 				//var spans=$('#XLayer').children('span');
 				var sps=[];
@@ -817,8 +824,10 @@
 					})
 				});

+				window.fx(pageNumber+1, true)


+
 			}

 			if(operation === "render" && value === 1) {
@@ -1001,7 +1010,8 @@
 				}
 				//debugger;
 				$scope.dataForm.playbackRate =  c.lastRate*10;
+				if ( isNaN(c.lastRate) == false )
-				$scope.playerForm.player.playbackRate = c.lastRate;
+					$scope.playerForm.player.playbackRate = c.lastRate;
 			}
 			helper.setLastRate = function setLastRate(page) {
 				helper.storeProp('lastRate', page)
\ No newline at end of file
Index: www/js/speakHTMLText_Cleaned.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- www/js/speakHTMLText_Cleaned.js	(date 1482271951000)
+++ www/js/speakHTMLText_Cleaned.js	(revision )
@@ -1043,54 +1043,7 @@
                 }
             }

-            utils.scrollToElement = function (target) {
-                target = $(target);

-                if ( self.data.autoScrollingEnabled == false ) {
-                    return;
-                }
-
-                if (target.length) {
-                    var scrollBody = $('html,body')
-
-                    var scrollTop = target.offset().top-200;
-                    if ( self.data.toDiv )  {
-                        scrollBody = self.data.toDiv
-                        var scrollTop = target.offset().top
-                            - target.parent().offset().top-200;
-
-                        var scrollTop =  target.parent().offset().top;
-
-                        if ( target.parent().offset().top == target.parent().parent().offset().top) {
-                            var scrollTop = target.parent().offset().top
-                                - target.parent().parent().offset().top-200;
-                        }
-
-                        scrollTop =  scrollBody.scrollTop() + target.offset().top // - 200
-                        scrollTop -= target.height()
-                        scrollTop -= 100
-                        scrollTop -= 200
-
-                        if ( scrollTop > target.height() ) {
-                            console.log('scroll top fix, is this an iframe?',
-                                target.offset().top )
-                            scrollTop = target.offset().top-100;
-                        }
-                    }
-
-                    console.log('scroll to top', scrollTop,target.height(),
-                        scrollBody.scrollTop(),  target.offset().top,
-                        target.offset().top , target.parent().offset().top)
-
-                    scrollBody.clearQueue();
-                    scrollBody.stop();
-                    scrollBody.animate({
-                        scrollTop:scrollTop
-                    }, 500);
-                    //return false;
-                }
-            }
-
             utils.findSentencesInHtml = function findSentencesInHtml(parent) {

                 window.parent = parent;
@@ -1591,6 +1544,10 @@
         function defineNLP() {
             p.utils.nlp = function nlp(sentence) {

+                if ( window.nlp_compromise == null ) {
+                    console.log('no nlp')
+                    return;
+                }
                 var y =  nlp_compromise.text(sentence).nouns()

                 var values = []
@@ -2044,14 +2001,14 @@
             }
             cfg.fx = fx;
             if ( cfg.rate == null ) {
-                cfg.rate  = $('#inputRate').val()
+                cfg.rate  = $('#inputRate').val();
             }
             if ( cfg.rate == null ) {
                 cfg.rate  = 6
             }

             if ( cfg.voice == null ) {
-                cfg.voice =  'IVONA 2 Brian'
+                cfg.voice =  'IVONA 2 Brian';
             }

             cfg.text = cfg.text.trim();
@@ -2062,6 +2019,9 @@
             console.log('speak:', 'trim',  cfg.text.trim().endsWith('reply'), cfg.text)
             var speakOnce = false
             var date = new Date();
+
+            cfg.text = cfg.text.replace('->', ' refers to ');
+
             $.ajax({
                 url: "http://localhost:4444/say",
                 data: {
@@ -2072,6 +2032,7 @@
                     voice:cfg.voice,
                 },
                 type:'post',
+                type:'get',
                 success: function(result){
                     var endDate = new Date();
                     console.log('total time',
\ No newline at end of file
Index: www/tinymce.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- www/tinymce.html	(date 1482271951000)
+++ www/tinymce.html	(revision )
@@ -7,7 +7,8 @@
     <link rel="stylesheet" type="text/css" href="/js/contextMenu.css">
     <script src="js/lib/jquery-1.11.2.min.js"></script>
     <script src="js/speakHTMLText_Cleaned.js"></script>
-
+    <script src="js/list.js"></script>
+    <script src="js/nlp_compromise.js"></script>
     <script src="js/lib/js.cookie.js"></script>
     <!--<script src="js/reloader.js"></script>-->
     <!-- <script src="js/lib/jquery-1.11.2.min.js"></script>
@@ -154,7 +155,24 @@
                 });


+                editor.on('nodeChangeX', function(e) {
+                    console.log('node event', e.element);
+                    if (  c.element == e.element ) {
+                        return
+                    }
+                    c.element = e.element
+                    var ui = $(e.element);

+                    // var ui = $(c.element)
+                    // var text = ui.text()
+                    // debugger;
+                    // console.debug(text, content.split(text)[1]);
+                    // var final = text  + content.split(text)[1];
+                    console.debug('txt to speac', text);
+                    window.speak(text)
+                    // play2()
+                })
+
                 editor.on('nodeChange', function onNodeChanged(e, wait) {
                     if ( wait != false ) {
                         setTimeout(function waitFewSecs(){
@@ -262,7 +280,7 @@
             console.debug('txt to speac', text);
             window.speak(text)
             // play2()
-        }
+                };

      //   debugger
         tHelper.setupPaste()
\ No newline at end of file
Index: www/js/lib/pdf/pdf.worker.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- www/js/lib/pdf/pdf.worker.js	(date 1482271951000)
+++ www/js/lib/pdf/pdf.worker.js	(revision )
@@ -3617,7 +3617,7 @@
         var isPrintAction = (isName(objType) && objType.name === 'Action' &&
                             isName(actionType) && actionType.name === 'Named' &&
                             isName(action) && action.name === 'Print');
-
+
         if (isPrintAction) {
           javaScript.push('print(true);');
         }
@@ -4473,7 +4473,7 @@
           warn('Search depth limit for named destionations has been reached.');
           return null;
         }
-
+
         var kids = kidsOrNames.get('Kids');
         if (!isArray(kids)) {
           return null;
@@ -4528,10 +4528,10 @@
 })();

 /**
- * "A PDF file can refer to the contents of another file by using a File
+ * "A PDF file can refer to the contents of another file by using a File
  * Specification (PDF 1.1)", see the spec (7.11) for more details.
  * NOTE: Only embedded files are supported (as part of the attachments support)
- * TODO: support the 'URL' file system (with caching if !/V), portable
+ * TODO: support the 'URL' file system (with caching if !/V), portable
  * collections attributes and related files (/RF)
  */
 var FileSpec = (function FileSpecClosure() {
@@ -4943,7 +4943,7 @@
       if (data.borderWidth > 0 && dashArray) {
         if (!isArray(dashArray)) {
           // Ignore the border if dashArray is not actually an array,
-          // this is consistent with the behaviour in Adobe Reader.
+          // this is consistent with the behaviour in Adobe Reader.
           data.borderWidth = 0;
         } else {
           var dashArrayLength = dashArray.length;
@@ -11144,8 +11144,11 @@
           var fn = operation.fn;
         //bookmark.where is color set?
             var opType = rev[fn]
+            if (opType != 'lineTo') {
-           console.log('b', fn, '.', rev[fn])
+                console.log('b', fn, '.', rev[fn])
+            }

+
           switch (fn | 0) {
             case OPS.paintXObject:
               if (args[0].code) {
@@ -11372,6 +11375,7 @@
         for (i = 0, ii = preprocessor.savedStatesDepth; i < ii; i++) {
           operatorList.addOp(OPS.restore, []);
         }
+         // operatorList.addOp('gdfgdfgdf', []);
         resolve();
       });
     },
@@ -11405,6 +11409,7 @@
       function newTextChunk() {
         var font = textState.font;
         if (!(font.loadedName in textContent.styles)) {
+          //  debugger; bookmark.asdf
           textContent.styles[font.loadedName] = {
             fontFamily: font.fallbackName,
             ascent: font.ascent,
@@ -11650,7 +11655,7 @@
               if (!xobjs) {
                 xobjs = (resources.get('XObject') || Dict.empty);
               }
-
+                //  debugger; bookmark.asdf ???
               var name = args[0].name;
               if (xobjsCache.key === name) {
                 if (xobjsCache.texts) {
@@ -33943,9 +33948,9 @@

 /* This class implements the QM Coder decoding as defined in
  *   JPEG 2000 Part I Final Committee Draft Version 1.0
- *   Annex C.3 Arithmetic decoding procedure
+ *   Annex C.3 Arithmetic decoding procedure
  * available at http://www.jpeg.org/public/fcd15444-1.pdf
- *
+ *
  * The arithmetic decoder is used in conjunction with context models to decode
  * JPEG2000 and JBIG2 streams.
  */
@@ -34587,7 +34592,7 @@

       // stage 3
       // Shift v0 by 128.5 << 5 here, so we don't need to shift p0...p7 when
-      // converting to UInt8 range later.
+      // converting to UInt8 range later.
       v0 = ((v0 + v1 + 1) >> 1) + 4112;
       v1 = v0 - v1;
       t  = (v2 * dctSin6 + v3 * dctCos6 + 2048) >> 12;
Index: www/index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- www/index.html	(date 1482271951000)
+++ www/index.html	(revision )
@@ -69,6 +69,7 @@
 <script src="js/lib/bootstrap-slider.min.js"></script>
 <script src="js/lib/slider.js"></script>

+<script src="js/screenCapture.js"></script>
 <!-- PDF.JS -->
 <script src="js/lib/pdf/pdf.js"></script>
 <script src="js/lib/pdf/pdf.worker.js"></script>
@@ -84,6 +85,7 @@

 	(function ConfigPDFJS(PDFJS) {
 		PDFJS.verbosity = PDFJS.VERBOSITY_LEVELS.errors;
+		//PDFJS.verbosity = PDFJS.VERBOSITY_LEVELS.info;
 		PDFJS.imageResourcesPath = "/img/pdfjs/"; // For annotation icons
 		PDFJS.disableWorker = true;
 		//PDFJS.workerSrc = 'js/lib/pdf/pdf.worker.js';
@@ -104,6 +106,7 @@
 <script src="js/lib/js.cookie.js"></script>
 <script src="js/reloader.js"></script>
 <script src="js/r2.js"></script>
-
+<script src="js/ui_utils.js"></script>
+<div id="#container_pdf"></div>
 </body>
 </html>
Index: www/js/lib/pdf/text_layer_builder.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- www/js/lib/pdf/text_layer_builder.js	(date 1482271951000)
+++ www/js/lib/pdf/text_layer_builder.js	(revision )
@@ -152,6 +152,7 @@
       var style = styles[geom.fontName];
       var textDiv = document.createElement('span');	// XYZ
       this.textDivs.push(textDiv);
+     // debugger //bookmark.x portion
       if (isAllWhitespace(geom.str)) {
         textDiv.dataset.isWhitespace = true;
         return;
